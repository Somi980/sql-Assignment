1. **Rank the customers based on the total amount they have spent on rentals.**

SELECT
    customer_id,
    CONCAT(first_name, ' ', last_name) AS customer_name,
    total_amount_spent,
    RANK() OVER (ORDER BY total_amount_spent DESC) AS r
FROM (
    SELECT
        c.customer_id,
        c.first_name,
        c.last_name,
        SUM(p.amount) AS total_amount_spent
    FROM
        customer c
    LEFT JOIN
        rental r ON c.customer_id = r.customer_id
    LEFT JOIN
        payment p ON r.rental_id = p.rental_id
    GROUP BY
        c.customer_id, c.first_name, c.last_name
) AS subquery;

  2. **Calculate the cumulative revenue generated by each film over time.**
  
  SELECT
    f.title AS film_title,
    r.rental_date,
    (f.rental_rate * f.rental_duration) AS revenue_per_rental,
    SUM(f.rental_rate * f.rental_duration) OVER (PARTITION BY r.film_id ORDER BY r.rental_date) AS cumulative_revenue
FROM
    rental r
JOIN
    film f ON r.film_id = f.film_id;
    
    
3. *Determine the average rental duration for each film, considering films with similar lengths.*
 
  select title,length,rental_duration,avg(rental_duration) over (partition by length) as average_rental_duration
 from film;
 
 4. Identify the top 3 films in each category based on their rental counts.
 
 WITH RankedFilms AS (
    SELECT
        fc.category_id,
        f.title AS film_title,
        COUNT(r.rental_id) AS rental_count,
        ROW_NUMBER() OVER (PARTITION BY fc.category_id ORDER BY COUNT(r.rental_id) DESC) AS rank
    FROM
        film f
    INNER JOIN
        film_category fc ON f.film_id = fc.film_id
    INNER JOIN
        inventory i ON f.film_id = i.film_id
    INNER JOIN
        rental r ON i.inventory_id = r.inventory_id
    GROUP BY
        fc.category_id, f.title
)
SELECT
    category_id,
    film_title,
    rental_count
FROM
    RankedFilms
WHERE
    rank <= 3;

5. *Calculate the difference in rental counts between each customers total rentals and the average rentals 
across all customers.

with customer_rental_count as(
select c.customer_id,c.first_name,c.last_name,count(r.rental_id) as total_rental,avg(count(r.rental_id))
 over() as average_rental 
from customer c left join rental r on r.customer_id = c.customer_id
group by c.customer_id,c.first_name,c.last_name) 
select
customer_id,first_name,last_name,total_rental,average_rental,total_rental-average_rental as rental_count_difference
from
customer_rental_count;

6. *Find the monthly revenue trend for the entire rental store over time.*
 SELECT DATE_FORMAT(payment_date, '%Y-%m') AS payment_month,
       SUM(amount) OVER (ORDER BY DATE_FORMAT(payment_date, '%Y-%m')) AS monthly_revenue
FROM payment
GROUP BY DATE_FORMAT(payment_date, '%Y-%m');

 
 7. *Identify the customers whose total spending on rentals falls within the top 20% of all customers.
 
 with customer_spending as(
select customer_id,sum(amount) as total_spending, percent_rank() over(order by sum(amount) DESC) AS spending_percentile
from payment 
group by 
customer_id)
select customer_id,total_spending from customer_spending  where spending_percentile <=0.2;

8. *Calculate the running total of rentals per category, ordered by rental count.*

WITH RentalCounts AS (
    SELECT
        category,
        COUNT(*) AS rental_count,
        SUM(COUNT(*)) OVER (PARTITION BY category ORDER BY COUNT(*) DESC) AS running_total
    FROM
        film
    JOIN
        film_category ON film.film_id = film_category.film_id
    JOIN
        category ON film_category.category_id = category.category_id
    JOIN
        inventory ON film.film_id = inventory.film_id
    JOIN
        rental ON inventory.inventory_id = rental.inventory_id
    GROUP BY
        category
)
SELECT
    category,
    rental_count,
    running_total
FROM
    RentalCounts
ORDER BY
    rental_count DESC;

9. Find the films that have been rented less than the average rental count for their respective categories.

WITH FilmRentalCounts AS (
    SELECT
        f.film_id,
        fc.category_id,
        COUNT(r.rental_id) AS rental_count,
        AVG(COUNT(r.rental_id)) OVER (PARTITION BY fc.category_id) AS avg_rental_count
    FROM
        film f
        INNER JOIN film_category fc ON f.film_id = fc.film_id
        INNER JOIN inventory i ON f.film_id = i.film_id
        INNER JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY
        f.film_id,
        fc.category_id
)
SELECT
    f.film_id,
    f.title,
    f.release_year,
    fc.category_id,
    f.rental_duration,
    f.rental_rate,
    f.length
FROM
    film f
    INNER JOIN film_category fc ON f.film_id = fc.film_id
    INNER JOIN FilmRentalCounts frc ON f.film_id = frc.film_id
WHERE
    frc.rental_count < frc.avg_rental_count;

10. *Identify the top 5 months with the highest revenue and display the revenue generated in each month.*

SELECT payment_month, monthly_revenue
FROM (
    SELECT DATE_FORMAT(payment_date, '%Y-%m') AS payment_month,
           SUM(amount) AS monthly_revenue,
           RANK() OVER (ORDER BY SUM(amount) DESC) AS revenue_rank
    FROM payment
    GROUP BY DATE_FORMAT(payment_date, '%Y-%m')
) AS monthly_revenues
WHERE revenue_rank <= 5;


